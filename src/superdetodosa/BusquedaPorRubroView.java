
package superdetodosa;

import java.util.TreeSet;
import javax.swing.table.DefaultTableModel;

public class BusquedaPorRubroView extends javax.swing.JInternalFrame {
DefaultTableModel modelo = new DefaultTableModel(){
        
        public boolean isCellEditable(int f, int c){
        return false;
        }
    };
    /**
     * Creates new form BusquedaPorRubroView
     */
    public BusquedaPorRubroView() {
        initComponents();
        armarCabecera();
        cargarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jcbRubro = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtProductos = new javax.swing.JTable();

        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel1.setText("Listado de Productos por Rubro");

        jLabel2.setText("Elija rubro");

        jcbRubro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elija el Rubro..." }));
        jcbRubro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbRubroActionPerformed(evt);
            }
        });

        jtProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtProductos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(99, 99, 99)
                                .addComponent(jLabel2)
                                .addGap(32, 32, 32)
                                .addComponent(jcbRubro, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jLabel1)))
                        .addGap(0, 62, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcbRubro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbRubroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbRubroActionPerformed
        // TODO add your handling code here:
        // Limpiar la tabla antes de cargar nuevos datos
    borrarFilas();

    // Obtener el rubro seleccionado del JComboBox
    String rubroSeleccionado = jcbRubro.getSelectedItem().toString();

    // Obtener los productos del rubro seleccionado
    TreeSet<Producto> productosRubro = obtenerProductosPorRubro(rubroSeleccionado);

    // Llenar la tabla con los productos del rubro
    for (Producto producto : productosRubro) {
        Object[] fila = {producto.getCodigo(), producto.getDescripcion(), producto.getPrecio(), producto.getStock()};
        modelo.addRow(fila);
    }
        
        
    }//GEN-LAST:event_jcbRubroActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcbRubro;
    private javax.swing.JTable jtProductos;
    // End of variables declaration//GEN-END:variables

 private void armarCabecera(){

    modelo.addColumn("Código");
    modelo.addColumn("Descripción");
    modelo.addColumn("Precio");
    modelo.addColumn("Stock");
    jtProductos.setModel(modelo);
    
    } 
 
   private void borrarFilas(){
    
        int f = jtProductos.getRowCount()-1;
        for(;f>=0;f--){
        modelo.removeRow(f);
        }
    }
   
   private void cargarCombo(){

Categoria[] categorias = Categoria.values();
    
    for (Categoria categoria : categorias) {
        jcbRubro.addItem(categoria.toString());
    }
}
   
   private TreeSet<Producto> obtenerProductosPorRubro(String rubro) {
    TreeSet<Producto> productosRubro = new TreeSet<>();

    for (Producto producto : MenuPrincipal.listaProductos) {
        if (producto.getRubro().toString().equals(rubro)) {
            productosRubro.add(producto);
        }
    }

    return productosRubro;
}
}
